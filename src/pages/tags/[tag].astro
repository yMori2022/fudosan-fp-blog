---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import PostCard from '@/components/PostCard.astro';

export async function getStaticPaths() {
  const all = await getCollection('blog');
  const posts = all.filter((p) => !p.data.draft);

  const tagSet = new Set<string>();
  for (const p of posts) for (const t of p.data.tags ?? []) tagSet.add(t);
  const tags = Array.from(tagSet);

  return tags.map((name) => ({
    params: { tag: name },
    props: {
      tag: name,
      posts: posts.filter((p) => (p.data.tags ?? []).includes(name))
        .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime()),
    },
  }));
}

const { tag, posts } = Astro.props as { tag: string; posts: Awaited<ReturnType<typeof getCollection<'blog'>>> };
---

<Layout>
  <section class="bg-gradient-to-b from-white to-slate-50 dark:from-zinc-900 dark:to-zinc-950 border-b">
    <div class="mx-auto max-w-3xl px-4 py-14">
      <a href="/tags/" class="text-sm text-blue-600 dark:text-blue-400 hover:underline">← タグ一覧に戻る</a>
      <h1 class="mt-2 text-3xl md:text-4xl font-extrabold tracking-tight text-slate-900 dark:text-white">タグ: #{tag}</h1>
      <p class="mt-3 text-slate-600 dark:text-slate-300">このタグが付いた記事</p>
    </div>
  </section>

  <main class="mx-auto max-w-3xl px-4 py-10 space-y-6">
    {posts.length === 0 ? (
      <p class="text-slate-600 dark:text-slate-300">該当する記事がありません。</p>
    ) : (
      posts.map((post) => <PostCard post={post} />)
    )}
  </main>
</Layout>
